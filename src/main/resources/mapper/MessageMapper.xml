<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dlut.community.dao.MessageMapper">

    <sql id="selectField">
        id, from_id, to_id, conversation_id, content, status, create_time
    </sql>
    <sql id="insertField">
        from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <select id="selectConversations" resultType="com.dlut.community.pojo.Message">
        select <include refid="selectField"></include>
        from message
        where id in (
            select max(id) from message
            where status != 2 -- 去除已删除消息
            and from_id != 1 -- 去除系统消息
            and (from_id = #{userId} or to_id = #{userId}) -- 查询当前用户的所有消息
            group by conversation_id -- 按conversation_id分组，查每一组的最大id就是每个会话的最新一条数据
            -- 以这个语句作为子查询，对id过滤后的数据就是我们想要的
        )
        order by id desc -- 倒序为了把最新消息显示在前
        limit #{offset}, #{limit};
    </select>
    <select id="selectConversationCount" resultType="java.lang.Integer">
        select count(m.maxId) from (
            select max(id) as maxId from message
            where status != 2 -- 去除已删除消息
            and from_id != 1 -- 去除系统消息
            and (from_id = #{userId} or to_id = #{userId}) -- 查询当前用户的所有消息
            group by conversation_id -- 按conversation_id分组，查每一组的最大id就是每个会话的最新一条数据
            -- 以这个语句作为子查询，对id过滤后的数据就是我们想要的
            ) as m;
    </select>
    <select id="selectLetters" resultType="com.dlut.community.pojo.Message">
        select <include refid="selectField"></include>
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId}
        order by id desc
        limit #{offset}, #{limit};
    </select>
    <select id="selectLetterCount" resultType="java.lang.Integer">
        select count(id)
        from message
        where status != 2
        and from_id != 1
        and conversation_id = #{conversationId};
    </select>

    <select id="selectLetterUnreadCount" resultType="java.lang.Integer">
        select count(id)
        from message
        where status = 0
        and from_id != 1
        and to_id = #{userId}
        <if test="conversationId != null">
            and conversation_id = #{conversationId}
        </if>
        ;
    </select>

    <insert id="insertMessage" parameterType="Message" keyProperty="id"> <!--说明主键是谁，这样id在数据库自增长会把值回填到实体类里-->
        insert into message (<include refid="insertField"></include>)
        values (#{fromId}, #{toId}, #{conversationId}, #{content}, #{status}, #{createTime});
    </insert>

    <update id="updateStatus">
        update message set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")"> -- 循环变量是ids，名称与接口参数对应。item是每次循环得到的一项
            #{id}
        </foreach>
    </update>

    <select id="selectLatestNotice" resultType="com.dlut.community.pojo.Message">
        select <include refid="selectField"></include>
        from message
        where id in (
            select max(id) from message
            where status != 2
            and from_id = 1
            and to_id = #{userId}
            and conversation_id = #{topic}
        )
    </select>
    <select id="selectNoticeCount" resultType="java.lang.Integer">
        select count(id) from message
        where status != 2
            and from_id = 1
            and to_id = #{userId}
          and conversation_id = #{topic};
    </select>
    <select id="selectNoticeUnreadCount" resultType="java.lang.Integer">
        select count(id) from message
        where status = 0
            and from_id = 1
            and to_id = #{userId}
          <if test="topic!=null">
              and conversation_id = #{topic};
          </if>

    </select>
    <select id="selectNotices" resultType="com.dlut.community.pojo.Message">
        select <include refid="selectField"></include>
        from message
        where status!=2
        and from_id = 1
        and to_id = #{userId}
        and conversation_id = #{topic}
        order by create_time desc
        limit #{offset}, #{limit};
    </select>

</mapper>